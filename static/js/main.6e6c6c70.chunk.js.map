{"version":3,"sources":["Components/FeedbackOptions/FeedbackOptions.js","Components/Section/Section.js","Components/Statistics/Statistics.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","value","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","App","state","evt","target","setState","prevState","onCountTotalFeedback","onCountPositiveFeedbackPercentage","totalFeedback","countTotalFeedback","Math","round","this","className","Children","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qWAqBeA,MAlBf,YAAuD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAChC,OACI,8BACCD,EAAQE,KAAI,SAAAC,GAAM,OACf,wBACAC,KAAK,SAELC,QAASJ,EACTK,MAAOH,EAJP,SAMAA,GAJKA,S,MCKFI,MATf,YAAsC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACtB,OACI,qCACR,6BAAKD,IACL,8BAAMC,Q,MCMSC,MAZf,YAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC7C,OACI,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCDJC,E,4MACJC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPZ,gBAAkB,SAAAiB,GAChB,IAAMZ,EAAQY,EAAIC,OAAOb,MACzB,EAAKc,UAAS,SAACC,GAAD,mBAAC,eACVA,GADS,kBACGf,EAAQe,EAAUf,GAAQ,Q,EAM7CgB,qBAAuB,WACrB,MAA6B,EAAKL,MAClC,OADA,EAAON,KAAP,EAAaC,QAAb,EAAsBC,K,EAKxBU,kCAAoC,WAClC,IAAMC,EAAgB,EAAKC,qBAC3B,OAAOD,EAAgBE,KAAKC,MAAO,EAAKV,MAAMN,KAAOa,EAAiB,KAAO,I,4CAG/E,WACE,MAA6BI,KAAKX,MAA3BN,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,IAGtB,OACA,sBAAKgB,UAAU,QAAf,UAEH,cAAC,EAAD,aAASrB,MAAM,0BAA0BC,SAAUqB,YAAnD,WACG,cAAC,EAAD,CACA9B,QAPgB,CAAC,OAAQ,UAAW,OAQpCC,gBAAiB2B,KAAK3B,oBAGxB,cAAC,EAAD,CAASO,MAAM,aAAf,SACA,cAAC,EAAD,CACAG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,KAAKN,qBACZP,mBAAoBa,KAAKL,6C,GA9CTQ,IAAMC,WAsDThB,IC1DfiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6e6c6c70.chunk.js","sourcesContent":["import s from './FeedbackOptions.module.css';\r\nimport PropTypes from \"prop-types\"; \r\n\r\nfunction FeedbackOptions ({options, onLeaveFeedback}) {\r\n    return (\r\n        <div>\r\n        {options.map(option => (\r\n            <button \r\n            type=\"button\" \r\n            key={option}\r\n            onClick={onLeaveFeedback}\r\n            value={option}\r\n            >\r\n           {option}\r\n            </button>\r\n        ))}\r\n                \r\n      </div>\r\n    );\r\n};\r\n\r\nexport default FeedbackOptions;","import { Children } from 'react';\r\nimport s from './Section.module.css';\r\nimport PropTypes from \"prop-types\"; \r\n\r\n\r\nfunction Section ({title, children}) {\r\n    return (\r\n        <>\r\n<h2>{title}</h2>\r\n<div>{children}</div>\r\n</>\r\n    )\r\n};\r\n\r\nexport default Section;","import s from './Statistics.module.css';\r\nimport PropTypes from \"prop-types\"; \r\n\r\nfunction Statistics ({good, neutral, bad, total, positivePercentage}) {\r\n    return (\r\n        <ul>\r\n          <li>Good:{good}</li>\r\n          <li>Neutral:{neutral}</li>\r\n          <li>Bad:{bad}</li>\r\n          <li>Total:{total}</li>\r\n          <li>Positive feedback:{positivePercentage} %</li>\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\nimport PropTypes from \"prop-types\"; \nimport { Children } from \"react\";\nimport \"./App.css\";\nimport FeedbackOptions from \"./Components/FeedbackOptions/FeedbackOptions\";\nimport Section from \"./Components/Section/Section\";\nimport Statistics from \"./Components/Statistics/Statistics\";\n\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  onLeaveFeedback = evt => {\n    const value = evt.target.value;\n    this.setState((prevState) => ({\n      ...prevState, [value]: prevState[value] +1,\n    }));\n\n  };\n\n  \n  onCountTotalFeedback = () => {\n    const {good, neutral, bad} = this.state;\n    return good + neutral + bad;\n    \n  };\n\n  onCountPositiveFeedbackPercentage = () => {\n    const totalFeedback = this.countTotalFeedback();\n    return totalFeedback ? Math.round((this.state.good / totalFeedback) * 100) : '';\n  };\n\n  render() {\n    const {good, neutral, bad} = this.state;\n    const options = ['good', 'neutral', 'bad'];\n\n    return (\n    <div className=\"s.App\">\n      \n <Section title=\"Please leave a feedback\" children={Children}>\n    <FeedbackOptions \n    options={options} \n    onLeaveFeedback={this.onLeaveFeedback}\n    />\n  </Section>\n  <Section title=\"Statistics\">\n  <Statistics \n  good={good} \n  neutral={neutral} \n  bad={bad} \n  total={this.onCountTotalFeedback} \n  positivePercentage={this.onCountPositiveFeedbackPercentage}\n  />\n  </Section>\n  </div>\n  )\n  }\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}